1. styled-component

- 스타일 컴포넌트도 "컴포넌트" => props:부모 => 자식 객체형태의 자료값을 전달!

- 기존에 정의해놓은 스타일 컴포넌트의 값을 가져다가 새로운 스타일 컴포넌트를 생성할 수 있다. 

- 기존 스타일 가져가면서 태그 종류 바꿀 수 있다 .

- const Input = styled.input.attrs({ required: true })``
  ==> 이렇게 속성값 적용가능

- nesting 기능 쓸 수 있음

- 스타일의 템플릿화가 가능하다

- 객체 자료형태의 테마(theme)를 가질 수 있다. 
==> App 컴포넌트의 상위 path(=경로) = useContext / Redux를 사용할 때 처럼 root component 위에 설정을 해주어야 root component 하위에 존재하는 컴포넌트들이 data값을 받을 수 있음.




<TS & React 실전 예제>

npx create-react-app 파일명 --template typescript

npm install styled-components  
npm install @types/styled-components 

npm install react-router-dom 
npm install @types/react-router-dom 

npm install react-hook-form(intput 태그 관련 훅)

원래 js 기반의 react => 확장자명 .jsx 인데 요새는 그냥 .js로 사용하고 있음


TS => init => complier option


* props: 데이터의 객체 형태

<number | string> 제네릭 형태 유니온형식

*TS에서 form태그 정의

* TS & React input 타입을 정의할 때 내장되어있는 문법을 써야한다. 


* input 태그를 사용해서 사용자에게서 어떤 값을 입력받을 때 타입에 대한 정의 - 내장문법을 사용한다. React.FormEvent<HTMLInputElement>

* js => 사용자가 입력한 값 => e.target.value
 사용자가 입력한 값의 타입 : e.currenttarget.value 에서 타입 정의

* form 태그 활용해서 서버로 전달할 때 타입 정의
React.FormEvent<HTMLFormElement>

* 스타일 컴포넌트 활용 theme
==> ThemeProvider를 활용해서 자식 컴포넌트들에게 전달되어지는 theme이라는 객체의 타입은 기존에 했던 타입 정의와 살짝 다름!

처음에 스타일컴포넌트를 npm으로 설치할 때 @types => 외부 라이브러리를 통해 가져오는 속성값들의 타입을 정의해서 가져올 수 있음

개발자가 theme으로 어떤 형태의 값을 정의할 지 알 수 없기 때문에, 사전에 타입정의가 원천적으로 불가!!!

themeProvider를 활용해서 자식컴포넌트에 theme을 전달하고자 할 때,
1) styled.d.ts : 타입 정의 - 공홈 문법 그대로 사용
2) 자식컴포넌트에 전달한 theme 값을 정의 => 타입 세팅 :theme.ts파일을 만들어서
3) index.tsx => ThemeProvider로 값을 전달
4) 자식 컴포넌트에서 가져다가 사용! color: ${(props) => props.theme.textColor};





