이벤트 => UI디자인(*figma)

*이벤트 / ( 동적인 웹 & 앱 페이지가 되기 위해서 필수 )
=> 사용자가 웹 앱 액션 행위를 하는 것 => 무엇인가를 실행시켜주는 것
 ==> load / click : 종류가 무수히 많다. 그때그때 MDN에서 찾아보기!

( 0. 이벤트 종류 : 실행되는 순간 )
< 문서 이벤트 종류 >
1. load : 문서 로딩이 종료되었을 때 
2. scroll : 문서에 화면이 스크롤 되었을 때 
3. error : 문서가 정확하게 로딩되지 않았을 때 (node.js에서 많이 활용)
4. resize : 문서 화면의 크기가 바뀌었을 때 
5. abort : 문서가 완전히 로딩되기 전에 불러오기를 멈추었을 때
6. unload : 문서를 벗어나게 되었을 때

< 마우스 이벤트 종류 >
1. click : 사용자가 html요소를 클릭했을 때
2. dbclivk : 사용자가 html요소를 더블 클릭했을 때
3. mousedown : 사용자가 특정 요소에서 마우스 버튼을 눌렀을 때
4. mousemove : 사용자가 특정 요소에서 마우스 포인터를 움직일 때
5. mouseover : 마우스 포인터를 특정 요소 위로 옮길 때
6. mouseout : 마우스 포인터가 특정 요소를 벗어날 때
7. mouseup : 특정 요소 위에 올려놓은 마우스 버튼에서 손을 땔 때 ( 은근히 많이 사용 )

Refactoring 을 하는 목적은 cleancode => 특정 요소 과한 기능 포함되었을 경우, 해당 요소 버그 발생시 디버깅하기가 매무 비효율적인 상황이 발생 => 미연에 방지하기 위해서 각각의 독립적인 기능을 따로 분리시켜놓는 작업 => 향후 코드를 재가공 & 유지보수

* 거의 대부분 웹에서 이벤트가 발생하게 되면 이벤트 객체라는 것이 생성됨. 

< 키보드 이벤트 종류 >
1. keydown : 키를 누르는 순간 ( 어떤 키를 눌렀는 가에 대한 관심 )
2. keyup : 키에서 손을 땔 때
3. keypress : 키를 눌렀을 때 ( 키를 누르는 행위 자체에 대한 관심. 점차 사용하지 않는 추세, 한국어 인식 못함 )

< Form 이벤트 >
1. submit : submit 속성값을 갖고 있는 버튼을 클릭했을 때
2. change : 목록이나 체크 등의 상태 변화가 발생했을 때 ( * select > option 변경 일때 많이 사용 )
3. focus : form 요소에 마우스를 포커스 했을 때 
4. blur : form 요소에 포커스를 해제 했을 때 
5. reset : form 안에 내용이 리셋 되었을 때

===> 4대 이벤트 위에 4가지

- 이벤트 처리 방법
 > 인라인 스크립트 :html 문서에 이벤트 직접 정의
 > 외부 스크립트 : 이벤트 핸들러 활용
 > 외부 스크립트 : 이벤트 리스너 활용

- 닥치고 외우기 보단  왜 필요한지 납득하고 나서 해야 좋음

0. event객체 프로퍼티 : 기능
< event 객체 프로퍼티 & 메서드 >
1. charCode : keypress 이벤트가 발생했을 때, 어떤 키를 눌렀는지 '유니코드 값으로 반환
2. clientX : 이벤트가 발생한 가로 위치값 반환
3. clientY : 이벤트가 발생한 세로 위치값 반환
4. pageX : 현재 작업하고 있는 html 전체 문서를 기준으로 이벤트가 발생한 가로 위치값 반환
5. pageY : 현재 작업하고 있는 html 전체 문서를 기준으로 이벤트가 발생한 세로 위치값 반환
6. screenX : 현재 화면을 기준으로 이벤트가 발생한 가로 위치값 반환 (100vw)
7. screenY : 현재 화면을 기준으로 이벤트가 발생한 세로 위치값 반환 (100vh)
8. target : 이벤트가 발생한 대상
9. altKey : 이벤트가 발생했을 때 alt를 클릭하고 있었는지의 여부를 확인하고 ture/false값으로 변환
10. shiftKey : 이벤트가 발생했을 때 shift를 클릭하고 있었는지의 여부를 확인하고 ture/false값으로 변환
11. code : 키보다 이벤트(keydown)가 발생했을 때 , 어떤 키를 입력했는지 확인하고자 할 때(* 키의 코드값 변환)
12. key : 키보다 이벤트(keydown)가 발생했을 때 , 어떤 키를 입력했는지 확인하고자 할 때(* 키의 이름값 변환)
 event 객체 메서드