* 자료구조 :
데이터가 어떤 구조로 저장되고 어떻게 사용되는지 나타내는 과정 및 결과

*알고리즘 :
어떤 문제를 해결하기 위한 최고 및 최선의 효율적인 방법(론)

*시간복잡도 :
해결하는데 걸리는 소요시간

arr = [1, 3, 5, 7]
=> 미션, 주어진 배열에서 5를 찾으세요

1) 직접 찾을 때 arr[2]
2) 반복문 순회하면서 찾기
3) 가장 안좋은 방법: 1, 3, 7 ~ 5 를 찾는 방법(배열의 길이 수 만큼 시간 걸림)

   => 가장 시간이 많이 걸리는 상황을 전제하에 시간 복잡도 계산

(시간 복잡도의 단위)
- 빅오메가 : 가장 최선의 경우, 한 번에 찾았을 때를 의미
- 빅세타 : 평균의 경우, 배열 길이의 중간만큼 시간이 걸리는 것을 의
- 빅오 : 최악의 경우, 배열의 길이만큼 시간이 걸리는 것을 의미

- 프로그래밍 영역에서는 시간이 가장 오래걸릴 것이라고 판단되는 구간을 발췌해서 시간 복잡도를 계산!
* 이터러블 객체가 구현하는 실행시간을 보고 판단. 
> 자료구조 & 알고리즘 
> 반복문 / 반복문 사용안하고 효율적인 코드는? 연결리스트 개념

 * 데이터 편집요소 기능 많은 경우 => 반복문 X, 연결리스트
 * 데이터 불러오거나 읽는 기능이 주된 기능 => 배열 지향

* 연결리스트는 배열이 아니지만 배열과 유사한 기능 구현

*연결리스트를 활용해서 구현할 수 있는 기능 및 연산작업을 하나씩 > 추상자료형

1) 연결리스트이 모든 데이터를 출력하는 기능
>printAll( )
2) 연결리스트이 모든 데이터를 제거 기능
>clear()
3) 연결리스트 내 인덱스를 삽입 기능
>insertAt(index, data)
4) 연결리스트 내 인덱스를 삭제 기능
>deleteAt(index)
5) 연결리스트 내 인덱스를 읽는 기능
>getNodeAt(index)
6) 연결리스트 내 인덱스를  마지막에 삽입 기능
>insertLast(data)
7) 연결리스트 내 인덱스를 마지막에 삭제 기능
>deleteLast(data)


*연결리스트 => Stack & Call

*stack : 아주 단순한 규칙을 가지고 있는 기능
 > 특징: 먼저 들어간 데이터가 반드시 나중에 나오는 규칙(FIFO)