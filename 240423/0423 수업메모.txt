1. UI화면 > 이벤트 => Action 실행 => Dispatch 에 담아서 객체를 Reducer 로 보냄 => store로 간다 => UI에서 다시 사용하기 위해 useSelector사용. 


 -  리덕스는 동기적 실행이기 때문에 API 나 외부에서 data를 가져와서 실행해야 하는 상황에서는 쥐약이다. 

 ===> 이를 해결하기 위해 Redux Middleware가 탄생하였다.
  ( Redux의 reducer를 비동기적으로 처리하기 위한 목적)
  ( store에 저장되는 reducer 및 해당 reducer 내부에서 처리하고 있는     action 객체를 비동기적으로 처리하기 위해서 reducer & action 객체    를 분리 독립시킬 필요가 발생)

+ 복수의 reducer가 존재할 때 어떻게 처리해야하는가?

state 관리: redux / react-query

예제) - todoList / 가위바위보 게임 / 감정일기장 / 날씨데이터 / 연락처 / 쇼핑몰 메인 페이지 (로그인 기능 구현) /  + 넷플릭스 버전 1 

- 그동안 fetch함수를 활용해서 data를 가져왔음. 
 동시에 여러개의 외부 API 데이터를 가져와서 보다 효율적으로 사용할 수 있도록 도와주는 API 호출 라이브러리가 있다.
- fetch => 웹 브라우저 상에서 외부 API를 가져오고자 할때! 웹에서는 강력! 그러나 node.js에서는 제약이 많다.(웹 브라우저 중 호환이 안되는 경우도 존재, json형식 => .json( )객체로 무조건 변환 ) 

- axios => 자동으로 json 형식 변환이 가능하다. & 크로스브라우징에 강력 
==> 외부 API 데이터를 여러개 사용하고자 할 때 만약 URL 경로 내 공통 & 반복적으로 사용되는 동적경로가 존재한다면, 해당 주소를 프로토타입으로 만들어서 뒤에 상이한 주소값만 적용할 수 있도록 인스턴스 기능을 부여해준다.  & 잘못된 값 가져오는 경우 Interceptors 이용해서 값을 가로챈다
